#!/usr/bin/env python3
import pathlib
import shutil
import subprocess
import re
import sys
import os

def find_dependencies(lib_path, visited=None):
    if visited is None:
        visited = set()

    if lib_path in visited:
        return set()

    visited.add(lib_path)
    deps = set()

    try:
        result = subprocess.run(['otool', '-L', lib_path],
                                capture_output=True, text=True, check=True)

        for line in result.stdout.split('\n')[1:]:  # Skip first line
            line = line.strip()
            if not line:
                continue

            # Extract library path
            match = re.match(r'\s*([^\s]+)', line)
            if match:
                dep_path = match.group(1)
                is_rpath = re.match(r'^@rpath', dep_path)
                if "@rpath" in dep_path:
                    dep_path = dep_path.replace("@rpath", pathlib.Path(lib_path).parent.as_posix())
                if ('/opt/homebrew/' in dep_path or
                        '/usr/local/' in dep_path or
                        'libav' in dep_path or
                        'libsw' in dep_path or
                        'libx' in dep_path or
                        'libvpx' in dep_path or
                        'libmp3lame' in dep_path or
                        'libopus' in dep_path or
                        'libvorbis' in dep_path or
                        'libogg' in dep_path or
                        'libtheora' in dep_path or
                        'libfdk' in dep_path):

                    deps.add(dep_path)
                    if is_rpath:
                        with open("@CMAKE_BINARY_DIR@/libav_installs.txt", "a") as f:
                            f.write(dep_path + "\n")
                        # shutil.copy(dep_path, "@CMAKE_INSTALL_PREFIX@/appfsCleaner.app/Contents/Frameworks/" + os.path.basename(dep_path))
                    # Recursively find dependencies
                    if os.path.exists(dep_path):
                        deps.update(find_dependencies(dep_path, visited))

    except subprocess.CalledProcessError:
        pass

    return deps

# Find libav libraries from pkg-config
try:
    with open("@CMAKE_BINARY_DIR@/libav_installs.txt", "w") as f:
        pass
    result = subprocess.run(['pkg-config', '--libs', 'libavformat', 'libavcodec', 'libavutil'],
                            capture_output=True, text=True, check=True)

    all_deps = set()

    # Extract library paths from pkg-config output
    for lib in re.findall(r'-l(\w+)', result.stdout):
        # Try to find the actual library file
        for prefix in ['/opt/homebrew/lib/', '/usr/local/lib/', '/usr/lib/']:
            lib_path = f"{prefix}lib{lib}.dylib"
            if os.path.exists(lib_path):
                all_deps.update(find_dependencies(lib_path))
                break

    # Convert to regex patterns
    for dep in sorted(all_deps):
        lib_name = os.path.basename(dep)
        regex = f".*{re.escape(lib_name)}"
        print(regex)

except Exception as e:
    print(f"Error: {e}", file=sys.stderr)
    sys.exit(1)